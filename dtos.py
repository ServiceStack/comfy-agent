""" Options:
Date: 2025-09-24 12:07:58
Version: 8.81
Tip: To override a DTO option, remove "#" prefix before updating
BaseUrl: https://amd.raptor-elver.ts.net

#GlobalNamespace: 
#AddServiceStackTypes: True
#AddResponseStatus: False
#AddImplicitVersion: 
#AddDescriptionAsComments: True
IncludeTypes: {Agent}
#ExcludeTypes: 
#DefaultImports: datetime,decimal,marshmallow.fields:*,servicestack:*,typing:*,dataclasses:dataclass/field,dataclasses_json:dataclass_json/LetterCase/Undefined/config,enum:Enum/IntEnum
#DataClass: 
#DataClassJson: 
"""

import datetime
import decimal
from marshmallow.fields import *
from servicestack import *
from typing import *
from dataclasses import dataclass, field
from dataclasses_json import dataclass_json, LetterCase, Undefined, config
from enum import Enum, IntEnum
Object = TypeVar('Object')


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GpuInfo:
    index: int = 0
    name: Optional[str] = None
    total: int = 0
    free: int = 0
    used: int = 0


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ComfyAgentConfig:
    install_models: Optional[bool] = None
    install_nodes: Optional[bool] = None
    install_packages: Optional[bool] = None


class AssetType(str, Enum):
    IMAGE = 'Image'
    VIDEO = 'Video'
    AUDIO = 'Audio'
    ANIMATION = 'Animation'
    TEXT = 'Text'
    BINARY = 'Binary'


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ObjectDetection:
    model: Optional[str] = None
    class_: Optional[str] = field(metadata=config(field_name='class'), default=None)
    score: float = 0.0
    box: List[int] = field(default_factory=list)


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Ratings:
    predicted_rating: Optional[str] = None
    confidence: float = 0.0
    all_scores: Dict[str, float] = field(default_factory=dict)


# @Api(Description="The tool calls generated by the model, such as function calls.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ToolCall:
    """
    The tool calls generated by the model, such as function calls.
    """

    # @ApiMember(Description="The ID of the tool call.")
    id: Optional[str] = None
    """
    The ID of the tool call.
    """


    # @ApiMember(Description="The type of the tool. Currently, only `function` is supported.")
    type: Optional[str] = None
    """
    The type of the tool. Currently, only `function` is supported.
    """


    # @ApiMember(Description="The function that the model called.")
    function: Optional[str] = None
    """
    The function that the model called.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChoiceMessage:
    # @ApiMember(Description="The contents of the message.")
    content: Optional[str] = None
    """
    The contents of the message.
    """


    # @ApiMember(Description="The tool calls generated by the model, such as function calls.")
    tool_calls: Optional[List[ToolCall]] = None
    """
    The tool calls generated by the model, such as function calls.
    """


    # @ApiMember(Description="The role of the author of this message.")
    role: Optional[str] = None
    """
    The role of the author of this message.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Choice:
    # @ApiMember(Description="The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool")
    finish_reason: Optional[str] = None
    """
    The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool
    """


    # @ApiMember(Description="The index of the choice in the list of choices.")
    index: int = 0
    """
    The index of the choice in the list of choices.
    """


    # @ApiMember(Description="A chat completion message generated by the model.")
    message: Optional[ChoiceMessage] = None
    """
    A chat completion message generated by the model.
    """


# @Api(Description="Usage statistics for the completion request.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiCompletionUsage:
    """
    Usage statistics for the completion request.
    """

    # @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.\n\n")
    accepted_prediction_tokens: int = 0
    """
    When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.
    """


    # @ApiMember(Description="Audio input tokens generated by the model.")
    audio_tokens: int = 0
    """
    Audio input tokens generated by the model.
    """


    # @ApiMember(Description="Tokens generated by the model for reasoning.")
    reasoning_tokens: int = 0
    """
    Tokens generated by the model for reasoning.
    """


    # @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion.")
    rejected_prediction_tokens: int = 0
    """
    When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion.
    """


# @Api(Description="Breakdown of tokens used in the prompt.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiPromptUsage:
    """
    Breakdown of tokens used in the prompt.
    """

    # @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.\n\n")
    accepted_prediction_tokens: int = 0
    """
    When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.
    """


    # @ApiMember(Description="Audio input tokens present in the prompt.")
    audio_tokens: int = 0
    """
    Audio input tokens present in the prompt.
    """


    # @ApiMember(Description="Cached tokens present in the prompt.")
    cached_tokens: int = 0
    """
    Cached tokens present in the prompt.
    """


# @Api(Description="Usage statistics for the completion request.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiUsage:
    """
    Usage statistics for the completion request.
    """

    # @ApiMember(Description="Number of tokens in the generated completion.")
    completion_tokens: int = 0
    """
    Number of tokens in the generated completion.
    """


    # @ApiMember(Description="Number of tokens in the prompt.")
    prompt_tokens: int = 0
    """
    Number of tokens in the prompt.
    """


    # @ApiMember(Description="Total number of tokens used in the request (prompt + completion).")
    total_tokens: int = 0
    """
    Total number of tokens used in the request (prompt + completion).
    """


    # @ApiMember(Description="Breakdown of tokens used in a completion.")
    completion_tokens_details: Optional[OpenAiCompletionUsage] = None
    """
    Breakdown of tokens used in a completion.
    """


    # @ApiMember(Description="Breakdown of tokens used in the prompt.")
    prompt_tokens_details: Optional[OpenAiPromptUsage] = None
    """
    Breakdown of tokens used in the prompt.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiChatResponse:
    # @ApiMember(Description="A unique identifier for the chat completion.")
    id: Optional[str] = None
    """
    A unique identifier for the chat completion.
    """


    # @ApiMember(Description="A list of chat completion choices. Can be more than one if n is greater than 1.")
    choices: List[Choice] = field(default_factory=list)
    """
    A list of chat completion choices. Can be more than one if n is greater than 1.
    """


    # @ApiMember(Description="The Unix timestamp (in seconds) of when the chat completion was created.")
    created: int = 0
    """
    The Unix timestamp (in seconds) of when the chat completion was created.
    """


    # @ApiMember(Description="The model used for the chat completion.")
    model: Optional[str] = None
    """
    The model used for the chat completion.
    """


    # @ApiMember(Description="This fingerprint represents the backend configuration that the model runs with.")
    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.
    """


    # @ApiMember(Description="The object type, which is always chat.completion.")
    object: Optional[str] = None
    """
    The object type, which is always chat.completion.
    """


    # @ApiMember(Description="Specifies the processing type used for serving the request.")
    service_tier: Optional[str] = None
    """
    Specifies the processing type used for serving the request.
    """


    # @ApiMember(Description="Usage statistics for the completion request.")
    usage: Optional[OpenAiUsage] = None
    """
    Usage statistics for the completion request.
    """


    # @ApiMember(Description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.")
    metadata: Optional[Dict[str, str]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.
    """


    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AgentEvent:
    name: Optional[str] = None
    args: Optional[Dict[str, str]] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ComfyAgentSettings:
    in_device_pool: bool = False
    preserve_outputs: bool = False


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ArtifactRef:
    id: int = 0
    type: Optional[AssetType] = None
    url: Optional[str] = None
    length: int = 0
    device_id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ComfyTask:
    id: int = 0
    name: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ApiNode:
    inputs: Dict[str, Object] = field(default_factory=dict)
    class_type: Optional[str] = None


# @Api(Description="A list of messages comprising the conversation so far.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiMessage:
    """
    A list of messages comprising the conversation so far.
    """

    # @ApiMember(Description="The contents of the message.")
    content: Optional[Object] = None
    """
    The contents of the message.
    """


    # @ApiMember(Description="The images for the message.")
    images: List[str] = field(default_factory=list)
    """
    The images for the message.
    """


    # @ApiMember(Description="The role of the author of this message. Valid values are `system`, `user`, `assistant` and `tool`.")
    role: Optional[str] = None
    """
    The role of the author of this message. Valid values are `system`, `user`, `assistant` and `tool`.
    """


    # @ApiMember(Description="An optional name for the participant. Provides the model information to differentiate between participants of the same role.")
    name: Optional[str] = None
    """
    An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    """


    # @ApiMember(Description="The tool calls generated by the model, such as function calls.")
    tool_calls: Optional[List[ToolCall]] = None
    """
    The tool calls generated by the model, such as function calls.
    """


    # @ApiMember(Description="Tool call that this message is responding to.")
    tool_call_id: Optional[str] = None
    """
    Tool call that this message is responding to.
    """


# @Api(Description="Parameters for audio output. Required when audio output is requested with modalities: [audio]")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiChatAudio:
    """
    Parameters for audio output. Required when audio output is requested with modalities: [audio]
    """

    # @ApiMember(Description="Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.")
    format: Optional[str] = None
    """
    Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
    """


    # @ApiMember(Description="The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer.")
    voice: Optional[str] = None
    """
    The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer.
    """


class ResponseFormat(str, Enum):
    TEXT = 'text'
    JSON_OBJECT = 'json_object'


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiResponseFormat:
    # @ApiMember(Description="An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.")
    type: Optional[ResponseFormat] = None
    """
    An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
    """


class OpenAiToolType(str, Enum):
    FUNCTION = 'function'


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class OpenAiTools:
    # @ApiMember(Description="The type of the tool. Currently, only function is supported.")
    type: Optional[OpenAiToolType] = None
    """
    The type of the tool. Currently, only function is supported.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetComfyAgentEventsResponse:
    results: List[AgentEvent] = field(default_factory=list)
    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class RegisterComfyAgentResponse:
    id: int = 0
    api_key: Optional[str] = None
    device_id: Optional[str] = None
    nodes: List[str] = field(default_factory=list)
    categories: List[str] = field(default_factory=list)
    require_pip: Optional[List[str]] = None
    require_nodes: Optional[List[str]] = None
    require_models: Optional[List[str]] = None
    settings: Optional[ComfyAgentSettings] = None
    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AgentDataResponse:
    categories: List[str] = field(default_factory=list)
    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ComfyTasksResponse:
    results: List[ComfyTask] = field(default_factory=list)
    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ApiPrompt:
    prompt: Dict[str, ApiNode] = field(default_factory=dict)
    extra_data: Optional[Dict[str, Object]] = None
    client_id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class HelloResponse:
    result: Optional[str] = None


# @Api(Description="Given a list of messages comprising a conversation, the model will return a response.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChatCompletion:
    """
    Given a list of messages comprising a conversation, the model will return a response.
    """

    # @ApiMember(Description="A list of messages comprising the conversation so far.")
    messages: List[OpenAiMessage] = field(default_factory=list)
    """
    A list of messages comprising the conversation so far.
    """


    # @ApiMember(Description="ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API")
    model: Optional[str] = None
    """
    ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API
    """


    # @ApiMember(Description="Parameters for audio output. Required when audio output is requested with modalities: [audio]")
    audio: Optional[OpenAiChatAudio] = None
    """
    Parameters for audio output. Required when audio output is requested with modalities: [audio]
    """


    # @ApiMember(Description="Number between `-2.0` and `2.0`. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.")
    frequency_penalty: Optional[float] = None
    """
    Number between `-2.0` and `2.0`. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    """


    # @ApiMember(Description="Modify the likelihood of specified tokens appearing in the completion.")
    logit_bias: Optional[Dict[int, int]] = None
    """
    Modify the likelihood of specified tokens appearing in the completion.
    """


    # @ApiMember(Description="Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.")
    log_probs: Optional[bool] = None
    """
    Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    """


    # @ApiMember(Description="An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.")
    max_completion_tokens: Optional[int] = None
    """
    An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
    """


    # @ApiMember(Description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.")
    metadata: Optional[Dict[str, str]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.
    """


    # @ApiMember(Description="Output types that you would like the model to generate. Most models are capable of generating text, which is the default:")
    modalities: Optional[List[str]] = None
    """
    Output types that you would like the model to generate. Most models are capable of generating text, which is the default:
    """


    # @ApiMember(Description="How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.")
    n: Optional[int] = None
    """
    How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    """


    # @ApiMember(Description="Whether to enable parallel function calling during tool use.")
    parallel_tool_calls: Optional[bool] = None
    """
    Whether to enable parallel function calling during tool use.
    """


    # @ApiMember(Description="Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.")
    presence_penalty: Optional[float] = None
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    """


    # @ApiMember(Description="Used by OpenAI to cache responses for similar requests to optimize your cache hit rates.")
    prompt_cache_key: Optional[str] = None
    """
    Used by OpenAI to cache responses for similar requests to optimize your cache hit rates.
    """


    # @ApiMember(Description="Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.")
    reasoning_effort: Optional[str] = None
    """
    Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
    """


    # @ApiMember(Description="An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`. Setting Type to ResponseFormat.JsonObject enables JSON mode, which guarantees the message the model generates is valid JSON.")
    response_format: Optional[OpenAiResponseFormat] = None
    """
    An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`. Setting Type to ResponseFormat.JsonObject enables JSON mode, which guarantees the message the model generates is valid JSON.
    """


    # @ApiMember(Description="A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user.")
    safety_identifier: Optional[str] = None
    """
    A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user.
    """


    # @ApiMember(Description="This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.")
    seed: Optional[int] = None
    """
    This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
    """


    # @ApiMember(Description="Specifies the processing type used for serving the request.")
    service_tier: Optional[str] = None
    """
    Specifies the processing type used for serving the request.
    """


    # @ApiMember(Description="Up to 4 sequences where the API will stop generating further tokens.")
    stop: Optional[List[str]] = None
    """
    Up to 4 sequences where the API will stop generating further tokens.
    """


    # @ApiMember(Description="Whether or not to store the output of this chat completion request for use in our model distillation or evals products.")
    store: Optional[bool] = None
    """
    Whether or not to store the output of this chat completion request for use in our model distillation or evals products.
    """


    # @ApiMember(Description="If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.")
    stream: Optional[bool] = None
    """
    If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.
    """


    # @ApiMember(Description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.")
    temperature: Optional[float] = None
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    """


    # @ApiMember(Description="A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.")
    tools: Optional[List[OpenAiTools]] = None
    """
    A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    """


    # @ApiMember(Description="An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.")
    top_logprobs: Optional[int] = None
    """
    An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    """


    # @ApiMember(Description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.")
    top_p: Optional[float] = None
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    """


    # @ApiMember(Description="Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high.")
    verbosity: Optional[str] = None
    """
    Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UpdateComfyAgent(IReturn[EmptyResponse], IPost):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device_id: Optional[str] = None

    queue_count: int = 0
    status: Optional[str] = None
    error: Optional[ResponseStatus] = None
    gpus: Optional[List[GpuInfo]] = None
    models: Optional[Dict[str, List[str]]] = None
    language_models: Optional[List[str]] = None
    installed_pip: Optional[List[str]] = None
    installed_nodes: Optional[List[str]] = None
    installed_models: Optional[List[str]] = None
    running_generation_ids: Optional[List[str]] = None
    queued_generation_ids: Optional[List[str]] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UpdateComfyAgentStatus(IReturn[EmptyResponse], IPost):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device_id: Optional[str] = None

    status: Optional[str] = None
    logs: Optional[str] = None
    error: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetComfyAgentEvents(IReturn[GetComfyAgentEventsResponse], IGet):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device_id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class RegisterComfyAgent(IReturn[RegisterComfyAgentResponse], IPost):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device_id: Optional[str] = None

    version: int = 0
    comfy_version: Optional[str] = None
    workflows: List[str] = field(default_factory=list)
    queue_count: int = 0
    gpus: Optional[List[GpuInfo]] = None
    models: Optional[Dict[str, List[str]]] = None
    language_models: Optional[List[str]] = None
    installed_pip: Optional[List[str]] = None
    installed_nodes: Optional[List[str]] = None
    installed_models: Optional[List[str]] = None
    config: Optional[ComfyAgentConfig] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UnRegisterComfyAgent(IReturn[EmptyResponse], IPost):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device_id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UpdateWorkflowGeneration(IReturn[EmptyResponse], IPost):
    # @Validate(Validator="NotEmpty")
    id: Optional[str] = None

    # @Validate(Validator="NotEmpty")
    device_id: Optional[str] = None

    prompt_id: Optional[str] = None
    status: Optional[str] = None
    outputs: Optional[str] = None
    queue_count: Optional[int] = None
    error: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AgentData(IReturn[AgentDataResponse], IGet):
    # @Validate(Validator="NotEmpty")
    device_id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetArtifactClassificationTasks(IReturn[QueryResponse[ArtifactRef]], IGet):
    # @Validate(Validator="NotEmpty")
    device_id: Optional[str] = None

    # @Validate(Validator="NotEmpty")
    types: List[AssetType] = field(default_factory=list)

    take: Optional[int] = None
    wait_for: Optional[int] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class CompleteArtifactClassificationTask(IReturn[EmptyResponse], IPost):
    # @Validate(Validator="NotEmpty")
    device_id: Optional[str] = None

    artifact_id: int = 0
    tags: Optional[Dict[str, float]] = None
    categories: Optional[Dict[str, float]] = None
    objects: Optional[List[ObjectDetection]] = None
    ratings: Optional[Ratings] = None
    phash: Optional[str] = None
    color: Optional[str] = None
    error: Optional[ResponseStatus] = None


# @Route("/comfy/tasks")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetComfyTasks(IReturn[ComfyTasksResponse], IGet):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device_id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetGenerationApiPrompt(IReturn[ApiPrompt], IGet):
    """
    Use by Agents to get the API prompt for a generation for execution
    """

    id: Optional[str] = None


# @Route("/hello/{Name}")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Hello(IReturn[HelloResponse], IGet):
    name: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetChatCompletion(IReturn[ChatCompletion], IGet):
    # @Validate(Validator="NotEmpty")
    # @Validate(Validator="ExactLength(32)")
    device: Optional[str] = None

    # @Validate(Validator="NotEmpty")
    models: List[str] = field(default_factory=list)


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class CompleteChatCompletion(OpenAiChatResponse, IReturn[EmptyResponse], IPost):
    # @Validate(Validator="NotEmpty")
    ref_id: int = 0

